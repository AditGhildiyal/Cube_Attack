#pragma once
//#ifndef PreprocessingPhase_H_
//#define PreprocessingPhase_H_


#include <omp.h>
#include <chrono>
#include <cassert>
#include <fstream>
#include <iostream>
#include <cmath>
#include <random>
#include <vector>
#include <time.h>
#include <bits/stdc++.h>
#include <stdlib.h>

#include "generate_random.h"
#include "global.h"
#include "trivium.h"

template <typename T>
class PreprocessingPhase
{
	struct IndexData;

	SizeType KEY_size_, IV_size_;
	SizeType round_, round_numb, init_bits;	//cipher initialization rounds, number of initial output bits
	std::size_t numb_of_equations_, CubeSummation_end_;
	std::size_t cube_size_;
	std::vector<IndexData> linear_superpolys_;	//store all linear superpoly structures

	struct IndexData
	{
		std::size_t bit_indx;	//output bit index
		std::vector<int> indexes;
		bool free_memb{};	//free member of superpoly
		Bitset polynomial_coefficients;	// corresponding coefficients
		std::vector<Bitset> quadratic_coefficients;
		IndexData(const PreprocessingPhase &obj, const std::vector<int> &ind,
														std::size_t index = 0)
			: bit_indx(index), indexes(ind)
		{
			polynomial_coefficients.resize(obj.KEY_size_);
			for (auto &coeff : quadratic_coefficients)
				coeff.resize(obj.KEY_size_ * obj.KEY_size_);
		}
	};
	//summing over Cube
	bool CubeSummation(const Bitset &KEY, const std::vector<int> &indices);
	void InitializeIV(const std::size_t &i, const std::vector<int> &indices, Bitset &IV);
	void InitializeKEY(const std::size_t &i, Bitset &KEY, int flag = 0);
	void FindCoefficients(IndexData &obj);
	void FindQuadraticCoefficients(IndexData &obj);
	//checking if output has changed
	bool ConstancyCheck(const IndexData &obj);
	bool LinearityTest(const std::vector<int> &indices);
	bool QuadraticityTest(const std::vector<int> &indices);
	bool QuadraticityTesting(const bool &free_memb, const Bitset &x,
							 const Bitset &y, const Bitset &z,
							 const std::vector<int> &ind);
	bool BlrTest(const bool &free_memb, const Bitset &x,
		const Bitset &y, const std::vector<int> &ind);
	//std::vector<int> GetCurrentIndexes(std::vector<int> bitmask);
	//void gen_rand(Bitset &set);	//generating random
	void WriteToCsv(const IndexData &obj);
	void WriteQuadToCsv(const IndexData &obj);

public:
	PreprocessingPhase() = default;
	~PreprocessingPhase() = default;
	PreprocessingPhase(const SizeType &k_size, const SizeType &I_size)
		: KEY_size_(k_size),
		IV_size_(I_size),
		round_numb(),
		init_bits(),
		round_() {}
	PreprocessingPhase(const PreprocessingPhase&) = delete;
	PreprocessingPhase &operator=(const PreprocessingPhase&) = delete;
	// set round number and amount of testing output bits
	void HardPreprocessing(); //check every indexes
	void SetCubeSize(const SizeType &size);
	void SetRoundNumber(const SizeType &num, const SizeType &amt = 0);
	void SetEquationNumber(const std::size_t &num);
	//friend bool operator<(const CubeAttack::IndexData &Lobj, const CubeAttack::IndexData &Robj);
};
//
template <typename T>
bool PreprocessingPhase<T>::CubeSummation(const Bitset &KEY, const std::vector<int> &indices)
{
   //auto cube_size = indices.size();	//Boolean cube dimension (test - 12)
	bool superpoly_value = 0;

	for (int i = 0; i < CubeSummation_end_; ++i)
	{

		Bitset IV(IV_size_);
		//adjust values of Cube Indexes in IV
		InitializeIV(i, indices, IV);
		//if(i==3)
        //{
		//std::cout<<IV;
        //}
		T cipher(KEY, IV ,round_);
		bool abc1=cipher.gen();
		//std::cout<<"here";
		superpoly_value ^= abc1;
		//std::cout<<superpoly_value;
        //Trivium triv;
		//Trivium temp(KEY, IV, round_);
		//function temp(KEY, IV);
		//std::cout<<abc1;
		//superpoly_value ^= abc1;
		//std::cout<<superpoly_value;
	}
	//std::cout<<"Superpoly value"<<superpoly_value<<std::endl;
	return superpoly_value;
}
template <typename T>
void PreprocessingPhase<T>::InitializeIV(const std::size_t &i, const std::vector<int> &indices, Bitset &IV)
{
	Bitset temp(indices.size(), i);
	for (std::size_t j = 0; j < indices.size(); ++j)
	{
		IV[IV_size_ - 1 - indices[j]] = temp[j];
	}
	//std::cout<<IV;
	//std::cout<<"Hi"<<IV;
}
template <typename T>
void PreprocessingPhase<T>::InitializeKEY(const std::size_t &i, Bitset &KEY, int flag)
{
	if (flag)
		KEY.reset();
	KEY[KEY_size_ - 1 - i] = 1;
}
template <typename T>
void PreprocessingPhase<T>::FindCoefficients(IndexData &obj)
{
	Bitset KEY(KEY_size_);
	obj.free_memb = CubeSummation(KEY, obj.indexes);

    //std::cout <<obj.polynomial_coefficients;
	for (SizeType i = 0; i < KEY_size_; ++i)
	{
		InitializeKEY(i, KEY, 1);
		//std::cout<<"Hi"<<KEY<<std::endl;
		for (auto i = obj.indexes.begin(); i != obj.indexes.end(); ++i)
            {
          //  std::cout << *i << ' ';
            }
		obj.polynomial_coefficients[KEY_size_ - 1 - i] = CubeSummation(KEY, obj.indexes);
	}
	//std::cout<<obj.polynomial_coefficients;

	if (obj.free_memb)
		obj.polynomial_coefficients.flip();
}

template <typename T>
bool PreprocessingPhase<T>::LinearityTest(const std::vector<int> &indices)
{
	//Bitset x(KEY_size_), y(KEY_size_);
	//std::cout<<"Helloooooooooo";
	bool free_memb = CubeSummation(Bitset(KEY_size_), indices);
	//for (auto i = indices.begin(); i != indices.end(); ++i)
    //{
       // std::cout << *i << ' ';
    //}
    //std::cout<<"bitset";
	for (int i = 0; i < kLinearityTestsNumber; ++i)
	{
	    int sp=0;
		//gen_rand(x);
		//gen_rand(y);

		GenerateRandom random;
		auto x = random.GenerateBitset(KEY_size_);
		auto y = random.GenerateBitset(KEY_size_);
		if(sp<=1)
        {
            std::ofstream out("keys.txt", std::ofstream::app);
            assert(out.good());
            out<<x<<"\n";
            out<<y<<"\n";
            sp=sp+1;
        }
		//std::cout<<"   "<<x<<"                    ";
		//std::cout<<y<<"                    ";
		if (!BlrTest(free_memb, x, y, indices))
        {
                //std::cout<<"Hereaaaa";
                std::cout<<"False";
                //_Exit(10);
                return false;
        }
	}
	std::cout<<"True";
	return true;
}
template <typename T>
inline bool PreprocessingPhase<T>::ConstancyCheck(const IndexData &obj)
{
	return obj.polynomial_coefficients.any();
}

template <typename T>
inline bool PreprocessingPhase<T>::BlrTest(const bool &free_memb, const Bitset &x,
	const Bitset &y, const std::vector<int> &ind)
{
    //std::cout<<"problem";
	//f(0) + f(x) + f(y) == f(x+y)
	return ((free_memb ^ CubeSummation(x, ind) ^ CubeSummation(y, ind)) == CubeSummation(x^y, ind));
}

template <typename T>
void PreprocessingPhase<T>::HardPreprocessing()
{
    //int count=0;
    //std::vector<int> bitmask(cube_size_, 1);
	//std::vector<int> current_testing_indexes={0,10,11,23,25,26,29,57,68,71};
	//std::vector<int> current_testing_indexes;
    int count1=3;
	int a1=0,a2=0,a3=0,a4=0,a5=0;
	for(int r=0;r<1000;r++)
    {
        //std::vector<int> bitmask(cube_size_, 1);
        //std::cout<<"ola";
        srand(count1);
        //std::cout<<"Cube indexes are :"<<std::endl;
        a1=rand()%80;
        //std::cout<<" ";
        a2=rand()%80;
        //std::cout<<" ";
        a3=rand()%80;
        //std::cout<<" ";
        a4=rand()%80;
        //std::cout<<" ";
        a5=rand()%80;
        //a6=rand()%80;
        //std::cout<<a1<<a2<<a3<<a4<<a5;
        count1=count1+1;
    std::vector<int> bitmask(cube_size_, 1);
    std::vector<int> current_testing_indexes={a1,a2,a3,a4,a5};
	CubeSummation_end_ = pow(2, bitmask.size());
	bitmask.resize(KEY_size_, 0);
	while (round_ <= round_numb + init_bits)
    {
	if (LinearityTest(current_testing_indexes))
    {
        //std::cout<<"here2";
        IndexData ind(*this, current_testing_indexes, round_);
        FindCoefficients(ind);
        std::cout<<"here2";
       // std::cout<<ind.polynomial_coefficients<<std::endl;
        if (ConstancyCheck(ind))
				{
				    //std::cout<<"here2";
				    //std::cout<<ind.polynomial_coefficients<<std::endl;
				    auto count = ind.polynomial_coefficients.count();
				    std::cout<<"For the cube indexes:";
				    for (auto i = current_testing_indexes.begin(); i != current_testing_indexes.end(); ++i)
                        {
                             std::cout << *i << ' ';
                        }
                    std::cout<<"   Maxterm:";
				    //std::cout<<current_testing_indexes;<<std::endl;
				    for (auto i = ind.polynomial_coefficients.size() - 1; i > 0; --i)
                    {
                        if (ind.polynomial_coefficients[i])
                        std::cout << "x" << ind.polynomial_coefficients.size() - 1 - i << (--count ? "+" : "");	//print maxterm
                    }
                    std::cout<<"     Trivium initial round=672 bit=675 ";
                    std::cout<<std::endl;
				    //std::cout<<
				    //std::cout<<ind;
					WriteToCsv(ind);
					//break;
				}
				std::cout<<"No change";
        }
        ++round_;
        }
        current_testing_indexes.clear();
		round_ = round_numb;
   // }

	//permute bitmask
	/*do
	{
		for (int i = 0; i < KEY_size_; ++i) // [0..N-1] integers
		{
			if (bitmask[i])
				current_testing_indexes.push_back(i);
		}
		for (const auto &el : current_testing_indexes)
			std::cout << el << " ";
			//std::cout<<"here";
		std::cout << std::endl;

		while (round_ <= round_numb + init_bits)
		 {
			if (LinearityTest(current_testing_indexes))	//if polynomial is linear
			{
			    //std::cout<<"here1";
				IndexData ind(*this, current_testing_indexes, round_);
				FindCoefficients(ind);
				//std::cout<<ind.polynomial_coefficients<<std::endl;
				if (ConstancyCheck(ind))
				{
				    //std::cout<<"here2";
				    //std::cout<<ind.polynomial_coefficients<<std::endl;
				    //std::cout<<"Working";
				    //std::cout<<
				    //std::cout<<ind;
				    std::cout<<"   Maxterm:";
				    for (auto i = ind.polynomial_coefficients.size() - 1; i > 0; --i)
                    {
                        if (ind.polynomial_coefficients[i])
                        std::cout << "x" << ind.polynomial_coefficients.size() - 1 - i << (--count ? "+" : "");	//print maxterm
                    }

					WriteToCsv(ind);
					//std::cout<<"Working";
					break;
				}
			}
			++round_; //testing all output bits in interval [round_numb, round_numb + init_bits]
		}
		current_testing_indexes.clear();
		round_ = round_numb;
	} while (std::prev_permutation(bitmask.begin(), bitmask.end()));*/
}
}
//}
template <typename T>
void PreprocessingPhase<T>::WriteToCsv(const IndexData &obj)
{
	std::ofstream out("maxterm.txt", std::ofstream::app);
	assert(out.good());

	if (obj.free_memb)
		out << "1+";	//print free_member
	auto count = obj.polynomial_coefficients.count();
	for (auto i = obj.polynomial_coefficients.size() - 1; i > 0; --i)
	{
		if (obj.polynomial_coefficients[i])
			out << "x" << obj.polynomial_coefficients.size() - 1 - i << (--count ? "+" : "");	//print maxterm
	}
	out << ",";
	for (const auto &inx : obj.indexes)
		out << inx << " ";	//print indexes
	out << ",\n";
	out << obj.bit_indx;
}

template <typename T>
void PreprocessingPhase<T>::SetRoundNumber(const SizeType &num, const SizeType &amt)
{
	round_numb = round_ = num;
	init_bits = amt;
}
template <typename T>
void PreprocessingPhase<T>::SetCubeSize(const SizeType &size)
{
	cube_size_ = size;
}
template <typename T>
void PreprocessingPhase<T>::SetEquationNumber(const std::size_t &num)
{
	numb_of_equations_ = num;
}
int main()
{
    time_t start, end;
    start = clock();
	PreprocessingPhase<Trivium> test(80,80);
	test.SetCubeSize(5);
	test.SetRoundNumber(672,5);
	test.HardPreprocessing();
	end = clock();
	double time_taken = double(end - start) / double(CLOCKS_PER_SEC);
    std::cout << "Time taken by program is : " << std::fixed << time_taken << std::setprecision(5);
        std::cout << " sec " <<std::endl;

	system("pause");
	return 0;
}
